##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++## Created by: Hang Zhang## Email: zhanghang0704@gmail.com## Copyright (c) 2020#### LICENSE file in the root directory of this source tree##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"""ResNeSt models"""import torchfrom .resnet import ResNet, Bottleneck__all__ = ['resnest50', 'resnest101', 'resnest200', 'resnest269']_url_format = 'https://hangzh.s3.amazonaws.com/encoding/models/{}-{}.pth'_model_sha256 = {name: checksum for checksum, name in [    ('528c19ca', 'resnest50'),    ('22405ba7', 'resnest101'),    ('75117900', 'resnest200'),    ('0cc87c48', 'resnest269'),    ]}def short_hash(name):    if name not in _model_sha256:        raise ValueError('Pretrained model for {name} is not available.'.format(name=name))    return _model_sha256[name][:8]resnest_model_urls = {name: _url_format.format(name, short_hash(name)) for    name in _model_sha256.keys()}def _resnest(name,layers,stem_width,pretrained=False, **kwargs):    if pretrained:        number_cls = kwargs['num_classes']        kwargs['num_classes'] = 1000        model = ResNet(Bottleneck, layers,                       radix=2, groups=1, bottleneck_width=64,                       deep_stem=True, stem_width=stem_width, avg_down=True,                       avd=True, avd_first=False, **kwargs)        model.load_state_dict(torch.hub.load_state_dict_from_url(            resnest_model_urls[name], progress=True, check_hash=True))        model.change_cls_number(number_cls)    else:        model = ResNet(Bottleneck, layers,                       radix=2, groups=1, bottleneck_width=64,                       deep_stem=True, stem_width=stem_width, avg_down=True,                       avd=True, avd_first=False, **kwargs)    return modeldef resnest50(pretrained=False, root='~/.encoding/models', **kwargs):    return _resnest('resnest50',[3, 4, 6, 3],stem_width=32,pretrained=pretrained,**kwargs)def resnest101(pretrained=False, root='~/.encoding/models', **kwargs):    return _resnest('resnest101',[3, 4, 23, 3],stem_width=64,pretrained=pretrained,**kwargs)def resnest200(pretrained=False, root='~/.encoding/models', **kwargs):    return _resnest('resnest200',[3, 24, 36, 3],stem_width=64,pretrained=pretrained,**kwargs)def resnest269(pretrained=False, root='~/.encoding/models', **kwargs):    return _resnest('resnest269',[3, 30, 48, 8],stem_width=64,pretrained=pretrained,**kwargs)