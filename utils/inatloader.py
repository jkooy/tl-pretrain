import torch.utils.data as datafrom PIL import Imageimport osimport jsonimport numpy as npimport randomimport tarfileimport iodef default_loader(path):    return Image.open(path).convert('RGB')def load_taxonomy(ann_data, tax_levels, classes):    # loads the taxonomy data and converts to ints    taxonomy = {}    if 'categories' in ann_data.keys():        num_classes = len(ann_data['categories'])        for tt in tax_levels:            tax_data = [aa[tt] for aa in ann_data['categories']]            _, tax_id = np.unique(tax_data, return_inverse=True)            taxonomy[tt] = dict(zip(range(num_classes), list(tax_id)))    else:        # set up dummy data        for tt in tax_levels:            taxonomy[tt] = dict(zip([0], [0]))    # create a dictionary of lists containing taxonomic labels    classes_taxonomic = {}    for cc in np.unique(classes):        tax_ids = [0]*len(tax_levels)        for ii, tt in enumerate(tax_levels):            tax_ids[ii] = taxonomy[tt][cc]        classes_taxonomic[cc] = tax_ids    return taxonomy, classes_taxonomicclass INAT_balance(data.Dataset):    def __init__(self, root, ann_file, ratio=1, transforms=None):        # load annotations        print('Loading annotations from: ' + os.path.basename(ann_file))        with open(ann_file) as data_file:            ann_data = json.load(data_file)        # set up the filenames and annotations        self.imgs = [aa['file_name'] for aa in ann_data['images']]        self.ids = [aa['id'] for aa in ann_data['images']]        # if we dont have class labels set them to '0'        self.weight = np.zeros(8142)        self.classes= []        if 'annotations' in ann_data.keys():            for aa in ann_data['annotations']:                self.classes.append(aa['category_id'])                self.weight[aa['category_id']] += 1        else:            self.classes = [0]*len(self.imgs)        # load taxonomy        self.tax_levels = ['id', 'genus', 'family', 'order', 'class', 'phylum', 'kingdom']                           #8142, 4412,    1120,     273,     57,      25,       6        self.taxonomy, self.classes_taxonomic = load_taxonomy(ann_data, self.tax_levels, self.classes)        # print out some stats        print('\t' + str(len(self.imgs)) + ' images')        print('\t' + str(len(set(self.classes))) + ' classes')        self.root = root        self.transform = transforms        self.loader = default_loader        self.b_imgs,self.b_ids,self.b_classes = self.balance()        self.ratio = ratio        if self.ratio < 1:            self.b_imgs, self.b_classes, self.b_ids = np.array(self.imgs), np.array(                self.classes), np.array(self.ids)            self.b_imgs, self.b_classes, self.b_ids =  self.select_ratio()    def select_ratio(self):        new_imgs = []        new_classes = []        new_ids = []        for c in range(8142):            index = self.classes==c            img_len = int(self.ratio * np.sum(index))+1            self.weight[c]=img_len            cls_images = self.imgs[index]            cls_ids = self.ids[index]            new_imgs.extend(cls_images[:img_len])            new_classes.extend(img_len*[c])            new_ids.extend(cls_ids[:img_len])        print("Train set with ratio {}({}) created".format(self.ratio,len(new_ids)))        return new_imgs, new_classes, new_ids    def balance(self):        max_count = np.max(self.weight)        over_count = max_count/self.weight        b_imgs, b_ids, b_classes = [],[],[]        for i in range(self.__len__()):            c = self.classes[i]            count = int(over_count[c])            b_imgs += [self.imgs[i] for _ in range(count)]            b_ids += [self.ids[i] for _ in range(count)]            b_classes += [self.classes[i] for _ in range(count)]        print("Balanced dataset created, Real sample number {}".format(len(b_imgs)))        return b_imgs, b_ids, b_classes    def __getitem__(self, index):        index = random.sample(range(len(self.b_imgs)),1)[0]        path = self.root + self.b_imgs[index]        im_id = self.b_ids[index]        img = self.loader(path)        species_id = self.b_classes[index]        tax_ids = self.classes_taxonomic[species_id]        if self.transform:            img = self.transform(img)        return img, im_id, species_id, tax_ids    def __len__(self):        return len(self.imgs)class INAT(data.Dataset):    def __init__(self, root, ann_file, ratio=1, transforms=None):        # load annotations        print('Loading annotations from: ' + os.path.basename(ann_file))        with open(ann_file) as data_file:            ann_data = json.load(data_file)        # set up the filenames and annotations        self.imgs = [aa['file_name'] for aa in ann_data['images']]        self.ids = [aa['id'] for aa in ann_data['images']]        # if we dont have class labels set them to '0'        self.weight = np.zeros(8142)        self.classes= []        if 'annotations' in ann_data.keys():            for aa in ann_data['annotations']:                self.classes.append(aa['category_id'])                self.weight[aa['category_id']] += 1        else:            self.classes = [0]*len(self.imgs)        # load taxonomy        self.tax_levels = ['id', 'genus', 'family', 'order', 'class', 'phylum', 'kingdom']                           #8142, 4412,    1120,     273,     57,      25,       6        self.taxonomy, self.classes_taxonomic = load_taxonomy(ann_data, self.tax_levels, self.classes)        # print out some stats        print('\t' + str(len(self.imgs)) + ' images')        print('\t' + str(len(set(self.classes))) + ' classes')        self.root = root        self.transform = transforms        self.loader = default_loader        self.ratio = ratio        if self.ratio < 1:            self.imgs, self.classes, self.ids = np.array(self.imgs), np.array(                self.classes), np.array(self.ids)            self.imgs, self.classes, self.ids =  self.select_ratio()    def select_ratio(self):        new_imgs = []        new_classes = []        new_ids = []        for c in range(8142):            index = self.classes==c            img_len = int(self.ratio * np.sum(index))+1            self.weight[c]=img_len            cls_images = self.imgs[index]            cls_ids = self.ids[index]            new_imgs.extend(cls_images[:img_len])            new_classes.extend(img_len*[c])            new_ids.extend(cls_ids[:img_len])        print("Train set with ratio {}({}) created".format(self.ratio,len(new_ids)))        return new_imgs, new_classes, new_ids    def __getitem__(self, index):        path = self.root + self.imgs[index]        im_id = self.ids[index]        img = self.loader(path)        species_id = self.classes[index]        tax_ids = self.classes_taxonomic[species_id]        if self.transform:            img = self.transform(img)        return img, im_id, species_id, tax_ids    def __len__(self):        return len(self.imgs)